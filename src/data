# src/data.py
from __future__ import annotations
import numpy as np
import pandas as pd

def _sigmoid(x):
    return 1 / (1 + np.exp(-x))

def _make_outputs_dir(path: str = "outputs"):
    import os
    os.makedirs(path, exist_ok=True)

def generate_healthcare(n: int = 5000, seed: int = 42) -> pd.DataFrame:
    """
    Synthetic healthcare: treatment = new_drug, outcome = health_score improvement.
    Confounders: age, comorbidity, prior_utilization.
    Heterogeneous treatment effect: stronger for younger & lower comorbidity.
    """
    rng = np.random.default_rng(seed)
    age = rng.normal(55, 10, size=n)                  # years
    comorb = rng.normal(1.5, 0.7, size=n).clip(0, 4)  # index
    prior_util = rng.poisson(2.0, size=n).astype(float)

    X = np.c_[age, comorb, prior_util]

    # Heterogeneous true treatment effect τ(X)
    tau = 2.0 - 0.02 * (age - 55) - 0.6 * (comorb - 1.5)
    tau = tau + 0.2 * (prior_util < 2)  # slightly higher effect if low prior utilization

    # Propensity depends on confounders (selection bias)
    logit_p = -0.3 + 0.015 * (55 - age) + 0.5 * (2.0 - comorb) + 0.2 * (2 - (prior_util > 2))
    p_treat = _sigmoid(logit_p)
    T = rng.binomial(1, p_treat)

    # Outcome model
    baseline = 70 + 0.1 * (55 - age) - 2.0 * (comorb - 1.5) - 0.8 * (prior_util - 2)
    noise = rng.normal(0, 3.0, size=n)
    Y0 = baseline + noise
    Y1 = baseline + tau + noise
    Y = Y0 * (1 - T) + Y1 * T

    df = pd.DataFrame({
        "age": age, "comorbidity": comorb, "prior_util": prior_util,
        "treatment": T.astype(int), "outcome": Y, "true_tau": tau
    })
    return df

def generate_finance(n: int = 5000, seed: int = 123) -> pd.DataFrame:
    """
    Synthetic finance: treatment = targeted_offer, outcome = monthly_spend uplift.
    Confounders: income, risk_score, tenure.
    Heterogeneous treatment effect: higher for mid-income & low risk.
    """
    rng = np.random.default_rng(seed)
    income = rng.lognormal(mean=10.7, sigma=0.35, size=n) / 1000.0  # ~ $25k-$150k (in thousands)
    risk = rng.normal(0.0, 1.0, size=n)                              # standardized risk score
    tenure = rng.integers(1, 84, size=n)                             # months with provider

    X = np.c_[income, risk, tenure]

    # Heterogeneous true treatment effect τ(X)
    tau = 5.0 + 1.0 * np.exp(-((income - 70) ** 2) / (2 * 25**2)) - 1.2 * np.maximum(risk, 0)
    tau += 0.5 * (tenure < 12)

    # Propensity (targeting bias)
    logit_p = -1.0 + 0.02 * (income - 60) - 0.4 * risk + 0.01 * (tenure - 24)
    p_treat = _sigmoid(logit_p)
    T = rng.binomial(1, p_treat)

    # Outcome model
    baseline = 60 + 0.3 * (income - 60) - 2.0 * np.maximum(risk, 0) + 0.05 * tenure
    noise = rng.normal(0, 5.0, size=n)
    Y0 = baseline + noise
    Y1 = baseline + tau + noise
    Y = Y0 * (1 - T) + Y1 * T

    df = pd.DataFrame({
        "income_k": income, "risk_score": risk, "tenure_m": tenure.astype(float),
        "treatment": T.astype(int), "outcome": Y, "true_tau": tau
    })
    return df
